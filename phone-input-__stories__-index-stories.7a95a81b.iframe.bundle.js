"use strict";(self.webpackChunk_sima_land_ui_nucleons=self.webpackChunk_sima_land_ui_nucleons||[]).push([[3801],{"./src/phone-input/__stories__/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefineCountryMask:()=>DefineCountryMask,NativeNumberInputComparison:()=>NativeNumberInputComparison,Primary:()=>Primary,TestInModal:()=>TestInModal,Validation:()=>Validation,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/phone-input/index.tsx"),_sima_land_ui_nucleons_text_button__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/text-button/index.ts"),react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/index.js"),_sima_land_ui_nucleons_modal__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/modal/index.ts"),_sima_land_ui_nucleons_top_bar__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/top-bar/index.ts"),_sima_land_ui_nucleons_bottom_bar__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/bottom-bar/index.ts"),_sima_land_ui_nucleons_clean_buttons__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/clean-buttons/index.ts"),_sima_land_ui_nucleons_internal_page_scroll_lock__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/_internal/page-scroll-lock/index.ts"),_storybook_utils__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./.storybook/utils.tsx"),_sima_land_ui_nucleons_button__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/button/index.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"common/PhoneInput",component:_sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__.s,parameters:{storySource:{source:"import { PhoneInput } from '@sima-land/ui-nucleons/phone-input';\nimport { TextButton } from '@sima-land/ui-nucleons/text-button';\nimport { useState } from 'react';\nimport { Modal, ModalBody, getResponsiveModalProps } from '@sima-land/ui-nucleons/modal';\nimport { TopBar } from '@sima-land/ui-nucleons/top-bar';\nimport { BottomBar } from '@sima-land/ui-nucleons/bottom-bar';\nimport { CleanButton, CleanGroup } from '@sima-land/ui-nucleons/clean-buttons';\nimport { BSL_IGNORE_ATTR } from '@sima-land/ui-nucleons/_internal/page-scroll-lock';\nimport { LoremIpsum } from '../../../.storybook/utils';\nimport { Button } from '@sima-land/ui-nucleons/button';\nexport default {\n  title: 'common/PhoneInput',\n  component: PhoneInput,\n  parameters: {\n    layout: 'padded'\n  }\n};\nexport function Primary() {\n  const defaultValue = '79998887766';\n  const [key, setKey] = useState<number>(0);\n  const [value, setValue] = useState<string>(defaultValue);\n  return <>\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\n      setValue(data.cleanValue);\n    }} style={{\n      width: '320px'\n    }} />\n\n      <p data-testid='phone:clean-value'>Значение: {value || '[пусто]'}</p>\n\n      <TextButton size='s' data-testid='phone:reset' onClick={() => {\n      setKey(n => n + 1);\n      setValue(defaultValue);\n    }}>\n        Сбросить\n      </TextButton>\n    </>;\n}\nPrimary.storyName = 'Простой пример';\nexport function Validation() {\n  const [value, setValue] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  return <PhoneInput style={{\n    width: 320\n  }} value={value} onFocus={() => {\n    setError(null);\n  }} onChange={(event, data) => {\n    setValue(data.cleanValue);\n    setError(null);\n  }} onBlur={(event, data) => {\n    !data.completed && setError('Поле не заполнено');\n  }} failed={Boolean(error)} caption={error || 'Мы не будем звонить по этому номеру'} />;\n}\nValidation.storyName = 'Пример: проверка заполнения';\nexport function DefineCountryMask() {\n  return <>\n      <article>\n        <h3>Пустое значение - «Россия» по умолчанию</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='' />\n      </article>\n      <article>\n        <h3>Армения</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='37422333444' />\n      </article>\n      <article>\n        <h3>Грузия</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='995111222333' />\n      </article>\n      <article>\n        <h3>Узбекистан</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='998556667777' />\n      </article>\n      <article>\n        <h3>Неизвестный номер - «Другое»</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='1234567890' />\n      </article>\n    </>;\n}\nDefineCountryMask.storyName = 'Пример: определение маски';\nexport function NativeNumberInputComparison() {\n  // PhoneInput\n  const defaultValue = '79501922700';\n  const [value, setValue] = useState<string>(defaultValue);\n  const [key, setKey] = useState<number>(0);\n\n  // input[type=number]\n  const defaultText = 'Hello';\n  const [text, setText] = useState<string>(defaultText);\n  return <>\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\n      setValue(data.cleanValue);\n    }} style={{\n      width: '320px'\n    }} />\n\n      <p>Значение: {value || '[пусто]'}</p>\n\n      <TextButton size='s' onClick={() => {\n      setValue(defaultValue);\n      setKey(n => n + 1);\n    }}>\n        Сбросить\n      </TextButton>\n\n      <p>\n        {/* Firefox позволяет вводить в input[type=number] нечисловые значения */}\n        <input type='number' value={text} onChange={event => {\n        setText(event.target.value);\n      }} />\n      </p>\n\n      <p>Значение: {text || '[пусто]'}</p>\n\n      <TextButton size='s' onClick={() => {\n      setText(defaultText);\n    }}>\n        Сбросить\n      </TextButton>\n    </>;\n}\nNativeNumberInputComparison.storyName = 'Тест: Сравнение с input[type=number]';\nexport function TestInModal() {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState<string>('');\n  return <>\n      <Button size='s' onClick={() => setOpen(true)}>\n        Показать окно\n      </Button>\n\n      {/* для проверки блокировки прокрутки страницы */}\n      <LoremIpsum paragraphCount={30} sentenceCount={30} />\n\n      {open && <Modal {...getResponsiveModalProps({\n      size: 'm'\n    })} onClose={() => setOpen(false)}>\n          <TopBar title='Тест' subtitle='PhoneInput внутри Modal' divided />\n\n          <ModalBody withScrollDisable>\n            <div style={{\n          padding: 16\n        }}>\n              <LoremIpsum paragraphCount={10} />\n\n              <PhoneInput label='Номер' value={value} onChange={event => setValue(event.target.value)} dropdownProps={{\n            viewportProps: {\n              [(BSL_IGNORE_ATTR as any)]: true\n            }\n          }} />\n\n              <LoremIpsum paragraphCount={10} />\n            </div>\n          </ModalBody>\n\n          <BottomBar divided>\n            <CleanGroup>\n              <CleanButton onClick={() => setOpen(false)}>Ясно</CleanButton>\n            </CleanGroup>\n          </BottomBar>\n        </Modal>}\n    </>;\n}\nTestInModal.storyName = 'Тест: В модальном окне';\nPrimary.parameters = {\n  ...Primary.parameters,\n  docs: {\n    ...Primary.parameters?.docs,\n    source: {\n      originalSource: \"function Primary() {\\n  const defaultValue = '79998887766';\\n  const [key, setKey] = useState<number>(0);\\n  const [value, setValue] = useState<string>(defaultValue);\\n  return <>\\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\\n      setValue(data.cleanValue);\\n    }} style={{\\n      width: '320px'\\n    }} />\\n\\n      <p data-testid='phone:clean-value'>\\u0417\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435: {value || '[\\u043F\\u0443\\u0441\\u0442\\u043E]'}</p>\\n\\n      <TextButton size='s' data-testid='phone:reset' onClick={() => {\\n      setKey(n => n + 1);\\n      setValue(defaultValue);\\n    }}>\\n        \\u0421\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C\\n      </TextButton>\\n    </>;\\n}\",\n      ...Primary.parameters?.docs?.source\n    }\n  }\n};\nValidation.parameters = {\n  ...Validation.parameters,\n  docs: {\n    ...Validation.parameters?.docs,\n    source: {\n      originalSource: \"function Validation() {\\n  const [value, setValue] = useState('');\\n  const [error, setError] = useState<string | null>(null);\\n  return <PhoneInput style={{\\n    width: 320\\n  }} value={value} onFocus={() => {\\n    setError(null);\\n  }} onChange={(event, data) => {\\n    setValue(data.cleanValue);\\n    setError(null);\\n  }} onBlur={(event, data) => {\\n    !data.completed && setError('\\u041F\\u043E\\u043B\\u0435 \\u043D\\u0435 \\u0437\\u0430\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u043E');\\n  }} failed={Boolean(error)} caption={error || '\\u041C\\u044B \\u043D\\u0435 \\u0431\\u0443\\u0434\\u0435\\u043C \\u0437\\u0432\\u043E\\u043D\\u0438\\u0442\\u044C \\u043F\\u043E \\u044D\\u0442\\u043E\\u043C\\u0443 \\u043D\\u043E\\u043C\\u0435\\u0440\\u0443'} />;\\n}\",\n      ...Validation.parameters?.docs?.source\n    }\n  }\n};\nDefineCountryMask.parameters = {\n  ...DefineCountryMask.parameters,\n  docs: {\n    ...DefineCountryMask.parameters?.docs,\n    source: {\n      originalSource: \"function DefineCountryMask() {\\n  return <>\\n      <article>\\n        <h3>\\u041F\\u0443\\u0441\\u0442\\u043E\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 - \\xAB\\u0420\\u043E\\u0441\\u0441\\u0438\\u044F\\xBB \\u043F\\u043E \\u0443\\u043C\\u043E\\u043B\\u0447\\u0430\\u043D\\u0438\\u044E</h3>\\n        <PhoneInput style={{\\n        width: 320\\n      }} defaultValue='' />\\n      </article>\\n      <article>\\n        <h3>\\u0410\\u0440\\u043C\\u0435\\u043D\\u0438\\u044F</h3>\\n        <PhoneInput style={{\\n        width: 320\\n      }} defaultValue='37422333444' />\\n      </article>\\n      <article>\\n        <h3>\\u0413\\u0440\\u0443\\u0437\\u0438\\u044F</h3>\\n        <PhoneInput style={{\\n        width: 320\\n      }} defaultValue='995111222333' />\\n      </article>\\n      <article>\\n        <h3>\\u0423\\u0437\\u0431\\u0435\\u043A\\u0438\\u0441\\u0442\\u0430\\u043D</h3>\\n        <PhoneInput style={{\\n        width: 320\\n      }} defaultValue='998556667777' />\\n      </article>\\n      <article>\\n        <h3>\\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440 - \\xAB\\u0414\\u0440\\u0443\\u0433\\u043E\\u0435\\xBB</h3>\\n        <PhoneInput style={{\\n        width: 320\\n      }} defaultValue='1234567890' />\\n      </article>\\n    </>;\\n}\",\n      ...DefineCountryMask.parameters?.docs?.source\n    }\n  }\n};\nNativeNumberInputComparison.parameters = {\n  ...NativeNumberInputComparison.parameters,\n  docs: {\n    ...NativeNumberInputComparison.parameters?.docs,\n    source: {\n      originalSource: \"function NativeNumberInputComparison() {\\n  // PhoneInput\\n  const defaultValue = '79501922700';\\n  const [value, setValue] = useState<string>(defaultValue);\\n  const [key, setKey] = useState<number>(0);\\n\\n  // input[type=number]\\n  const defaultText = 'Hello';\\n  const [text, setText] = useState<string>(defaultText);\\n  return <>\\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\\n      setValue(data.cleanValue);\\n    }} style={{\\n      width: '320px'\\n    }} />\\n\\n      <p>\\u0417\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435: {value || '[\\u043F\\u0443\\u0441\\u0442\\u043E]'}</p>\\n\\n      <TextButton size='s' onClick={() => {\\n      setValue(defaultValue);\\n      setKey(n => n + 1);\\n    }}>\\n        \\u0421\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C\\n      </TextButton>\\n\\n      <p>\\n        {/* Firefox \\u043F\\u043E\\u0437\\u0432\\u043E\\u043B\\u044F\\u0435\\u0442 \\u0432\\u0432\\u043E\\u0434\\u0438\\u0442\\u044C \\u0432 input[type=number] \\u043D\\u0435\\u0447\\u0438\\u0441\\u043B\\u043E\\u0432\\u044B\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u044F */}\\n        <input type='number' value={text} onChange={event => {\\n        setText(event.target.value);\\n      }} />\\n      </p>\\n\\n      <p>\\u0417\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435: {text || '[\\u043F\\u0443\\u0441\\u0442\\u043E]'}</p>\\n\\n      <TextButton size='s' onClick={() => {\\n      setText(defaultText);\\n    }}>\\n        \\u0421\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C\\n      </TextButton>\\n    </>;\\n}\",\n      ...NativeNumberInputComparison.parameters?.docs?.source\n    }\n  }\n};\nTestInModal.parameters = {\n  ...TestInModal.parameters,\n  docs: {\n    ...TestInModal.parameters?.docs,\n    source: {\n      originalSource: \"function TestInModal() {\\n  const [open, setOpen] = useState(false);\\n  const [value, setValue] = useState<string>('');\\n  return <>\\n      <Button size='s' onClick={() => setOpen(true)}>\\n        \\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u043E\\u043A\\u043D\\u043E\\n      </Button>\\n\\n      {/* \\u0434\\u043B\\u044F \\u043F\\u0440\\u043E\\u0432\\u0435\\u0440\\u043A\\u0438 \\u0431\\u043B\\u043E\\u043A\\u0438\\u0440\\u043E\\u0432\\u043A\\u0438 \\u043F\\u0440\\u043E\\u043A\\u0440\\u0443\\u0442\\u043A\\u0438 \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u044B */}\\n      <LoremIpsum paragraphCount={30} sentenceCount={30} />\\n\\n      {open && <Modal {...getResponsiveModalProps({\\n      size: 'm'\\n    })} onClose={() => setOpen(false)}>\\n          <TopBar title='\\u0422\\u0435\\u0441\\u0442' subtitle='PhoneInput \\u0432\\u043D\\u0443\\u0442\\u0440\\u0438 Modal' divided />\\n\\n          <ModalBody withScrollDisable>\\n            <div style={{\\n          padding: 16\\n        }}>\\n              <LoremIpsum paragraphCount={10} />\\n\\n              <PhoneInput label='\\u041D\\u043E\\u043C\\u0435\\u0440' value={value} onChange={event => setValue(event.target.value)} dropdownProps={{\\n            viewportProps: {\\n              [(BSL_IGNORE_ATTR as any)]: true\\n            }\\n          }} />\\n\\n              <LoremIpsum paragraphCount={10} />\\n            </div>\\n          </ModalBody>\\n\\n          <BottomBar divided>\\n            <CleanGroup>\\n              <CleanButton onClick={() => setOpen(false)}>\\u042F\\u0441\\u043D\\u043E</CleanButton>\\n            </CleanGroup>\\n          </BottomBar>\\n        </Modal>}\\n    </>;\\n}\",\n      ...TestInModal.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{primary:{startLoc:{col:7,line:18},endLoc:{col:1,line:38},startBody:{col:7,line:18},endBody:{col:1,line:38}},validation:{startLoc:{col:7,line:40},endLoc:{col:1,line:53},startBody:{col:7,line:40},endBody:{col:1,line:53}},"define-country-mask":{startLoc:{col:7,line:55},endLoc:{col:1,line:88},startBody:{col:7,line:55},endBody:{col:1,line:88}},"native-number-input-comparison":{startLoc:{col:7,line:90},endLoc:{col:1,line:130},startBody:{col:7,line:90},endBody:{col:1,line:130}},"test-in-modal":{startLoc:{col:7,line:132},endLoc:{col:1,line:171},startBody:{col:7,line:132},endBody:{col:1,line:171}}}},layout:"padded"}},Primary=function Primary(){const[key,setKey]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(0),[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)("79998887766");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__.s,{value,onChange:(event,data)=>{setValue(data.cleanValue)},style:{width:"320px"}},key),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)("p",{"data-testid":"phone:clean-value",children:["Значение: ",value||"[пусто]"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_text_button__WEBPACK_IMPORTED_MODULE_1__.A,{size:"s","data-testid":"phone:reset",onClick:()=>{setKey((n=>n+1)),setValue("79998887766")},children:"Сбросить"})]})};Primary.storyName="Простой пример";const Validation=function Validation(){const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(""),[error,setError]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__.s,{style:{width:320},value,onFocus:()=>{setError(null)},onChange:(event,data)=>{setValue(data.cleanValue),setError(null)},onBlur:(event,data)=>{!data.completed&&setError("Поле не заполнено")},failed:Boolean(error),caption:error||"Мы не будем звонить по этому номеру"})};Validation.displayName="Validation",Validation.storyName="Пример: проверка заполнения";const DefineCountryMask=function DefineCountryMask(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)("article",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)("h3",{children:"Пустое значение - «Россия» по умолчанию"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__.s,{style:{width:320},defaultValue:""})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)("article",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)("h3",{children:"Армения"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__.s,{style:{width:320},defaultValue:"37422333444"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)("article",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)("h3",{children:"Грузия"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__.s,{style:{width:320},defaultValue:"995111222333"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)("article",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)("h3",{children:"Узбекистан"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__.s,{style:{width:320},defaultValue:"998556667777"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)("article",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)("h3",{children:"Неизвестный номер - «Другое»"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__.s,{style:{width:320},defaultValue:"1234567890"})]})]})};DefineCountryMask.storyName="Пример: определение маски";const NativeNumberInputComparison=function NativeNumberInputComparison(){const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)("79501922700"),[key,setKey]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(0),[text,setText]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)("Hello");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__.s,{value,onChange:(event,data)=>{setValue(data.cleanValue)},style:{width:"320px"}},key),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)("p",{children:["Значение: ",value||"[пусто]"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_text_button__WEBPACK_IMPORTED_MODULE_1__.A,{size:"s",onClick:()=>{setValue("79501922700"),setKey((n=>n+1))},children:"Сбросить"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)("p",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)("input",{type:"number",value:text,onChange:event=>{setText(event.target.value)}})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)("p",{children:["Значение: ",text||"[пусто]"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_text_button__WEBPACK_IMPORTED_MODULE_1__.A,{size:"s",onClick:()=>{setText("Hello")},children:"Сбросить"})]})};NativeNumberInputComparison.storyName="Тест: Сравнение с input[type=number]";const TestInModal=function TestInModal(){const[open,setOpen]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(!1),[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)("");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_button__WEBPACK_IMPORTED_MODULE_9__.z,{size:"s",onClick:()=>setOpen(!0),children:"Показать окно"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_storybook_utils__WEBPACK_IMPORTED_MODULE_8__.Ap,{paragraphCount:30,sentenceCount:30}),open&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_sima_land_ui_nucleons_modal__WEBPACK_IMPORTED_MODULE_3__.u_,{...(0,_sima_land_ui_nucleons_modal__WEBPACK_IMPORTED_MODULE_3__.B1)({size:"m"}),onClose:()=>setOpen(!1),children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_top_bar__WEBPACK_IMPORTED_MODULE_4__.Du,{title:"Тест",subtitle:"PhoneInput внутри Modal",divided:!0}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_modal__WEBPACK_IMPORTED_MODULE_3__.fe,{withScrollDisable:!0,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)("div",{style:{padding:16},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_storybook_utils__WEBPACK_IMPORTED_MODULE_8__.Ap,{paragraphCount:10}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_phone_input__WEBPACK_IMPORTED_MODULE_0__.s,{label:"Номер",value,onChange:event=>setValue(event.target.value),dropdownProps:{viewportProps:{[_sima_land_ui_nucleons_internal_page_scroll_lock__WEBPACK_IMPORTED_MODULE_7__.kI]:!0}}}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_storybook_utils__WEBPACK_IMPORTED_MODULE_8__.Ap,{paragraphCount:10})]})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_bottom_bar__WEBPACK_IMPORTED_MODULE_5__._E,{divided:!0,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_clean_buttons__WEBPACK_IMPORTED_MODULE_6__.W,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_sima_land_ui_nucleons_clean_buttons__WEBPACK_IMPORTED_MODULE_6__.u,{onClick:()=>setOpen(!1),children:"Ясно"})})})]})]})};TestInModal.storyName="Тест: В модальном окне",Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"function Primary() {\n  const defaultValue = '79998887766';\n  const [key, setKey] = useState<number>(0);\n  const [value, setValue] = useState<string>(defaultValue);\n  return <>\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\n      setValue(data.cleanValue);\n    }} style={{\n      width: '320px'\n    }} />\n\n      <p data-testid='phone:clean-value'>Значение: {value || '[пусто]'}</p>\n\n      <TextButton size='s' data-testid='phone:reset' onClick={() => {\n      setKey(n => n + 1);\n      setValue(defaultValue);\n    }}>\n        Сбросить\n      </TextButton>\n    </>;\n}",...Primary.parameters?.docs?.source}}},Validation.parameters={...Validation.parameters,docs:{...Validation.parameters?.docs,source:{originalSource:"function Validation() {\n  const [value, setValue] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  return <PhoneInput style={{\n    width: 320\n  }} value={value} onFocus={() => {\n    setError(null);\n  }} onChange={(event, data) => {\n    setValue(data.cleanValue);\n    setError(null);\n  }} onBlur={(event, data) => {\n    !data.completed && setError('Поле не заполнено');\n  }} failed={Boolean(error)} caption={error || 'Мы не будем звонить по этому номеру'} />;\n}",...Validation.parameters?.docs?.source}}},DefineCountryMask.parameters={...DefineCountryMask.parameters,docs:{...DefineCountryMask.parameters?.docs,source:{originalSource:"function DefineCountryMask() {\n  return <>\n      <article>\n        <h3>Пустое значение - «Россия» по умолчанию</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='' />\n      </article>\n      <article>\n        <h3>Армения</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='37422333444' />\n      </article>\n      <article>\n        <h3>Грузия</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='995111222333' />\n      </article>\n      <article>\n        <h3>Узбекистан</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='998556667777' />\n      </article>\n      <article>\n        <h3>Неизвестный номер - «Другое»</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='1234567890' />\n      </article>\n    </>;\n}",...DefineCountryMask.parameters?.docs?.source}}},NativeNumberInputComparison.parameters={...NativeNumberInputComparison.parameters,docs:{...NativeNumberInputComparison.parameters?.docs,source:{originalSource:"function NativeNumberInputComparison() {\n  // PhoneInput\n  const defaultValue = '79501922700';\n  const [value, setValue] = useState<string>(defaultValue);\n  const [key, setKey] = useState<number>(0);\n\n  // input[type=number]\n  const defaultText = 'Hello';\n  const [text, setText] = useState<string>(defaultText);\n  return <>\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\n      setValue(data.cleanValue);\n    }} style={{\n      width: '320px'\n    }} />\n\n      <p>Значение: {value || '[пусто]'}</p>\n\n      <TextButton size='s' onClick={() => {\n      setValue(defaultValue);\n      setKey(n => n + 1);\n    }}>\n        Сбросить\n      </TextButton>\n\n      <p>\n        {/* Firefox позволяет вводить в input[type=number] нечисловые значения */}\n        <input type='number' value={text} onChange={event => {\n        setText(event.target.value);\n      }} />\n      </p>\n\n      <p>Значение: {text || '[пусто]'}</p>\n\n      <TextButton size='s' onClick={() => {\n      setText(defaultText);\n    }}>\n        Сбросить\n      </TextButton>\n    </>;\n}",...NativeNumberInputComparison.parameters?.docs?.source}}},TestInModal.parameters={...TestInModal.parameters,docs:{...TestInModal.parameters?.docs,source:{originalSource:"function TestInModal() {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState<string>('');\n  return <>\n      <Button size='s' onClick={() => setOpen(true)}>\n        Показать окно\n      </Button>\n\n      {/* для проверки блокировки прокрутки страницы */}\n      <LoremIpsum paragraphCount={30} sentenceCount={30} />\n\n      {open && <Modal {...getResponsiveModalProps({\n      size: 'm'\n    })} onClose={() => setOpen(false)}>\n          <TopBar title='Тест' subtitle='PhoneInput внутри Modal' divided />\n\n          <ModalBody withScrollDisable>\n            <div style={{\n          padding: 16\n        }}>\n              <LoremIpsum paragraphCount={10} />\n\n              <PhoneInput label='Номер' value={value} onChange={event => setValue(event.target.value)} dropdownProps={{\n            viewportProps: {\n              [(BSL_IGNORE_ATTR as any)]: true\n            }\n          }} />\n\n              <LoremIpsum paragraphCount={10} />\n            </div>\n          </ModalBody>\n\n          <BottomBar divided>\n            <CleanGroup>\n              <CleanButton onClick={() => setOpen(false)}>Ясно</CleanButton>\n            </CleanGroup>\n          </BottomBar>\n        </Modal>}\n    </>;\n}",...TestInModal.parameters?.docs?.source}}};const __namedExportsOrder=["Primary","Validation","DefineCountryMask","NativeNumberInputComparison","TestInModal"]}}]);