"use strict";(self.webpackChunk_sima_land_ui_nucleons=self.webpackChunk_sima_land_ui_nucleons||[]).push([[3801],{"./src/phone-input/__stories__/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefineCountryMask:()=>DefineCountryMask,NativeNumberInputComparison:()=>NativeNumberInputComparison,Primary:()=>Primary,Validation:()=>Validation,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});var react=__webpack_require__("./node_modules/react/index.js"),dropdown_item=__webpack_require__("./src/dropdown-item/index.ts"),hooks=__webpack_require__("./src/hooks/index.ts"),masked_input=__webpack_require__("./src/masked-input/index.ts"),presets=__webpack_require__("./src/phone-input/presets.ts"),utils=__webpack_require__("./src/phone-input/utils.ts"),src_select=__webpack_require__("./src/select/index.ts"),select_utils=__webpack_require__("./src/select/utils.ts"),Up=__webpack_require__("./node_modules/@sima-land/ui-quarks/icons/16x16/Stroked/Arrows/Up.js"),Down=__webpack_require__("./node_modules/@sima-land/ui-quarks/icons/16x16/Stroked/Arrows/Down.js"),bind=__webpack_require__("./node_modules/classnames/bind.js"),bind_default=__webpack_require__.n(bind),injectStylesIntoStyleTag=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),phone_input_module=__webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[15].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/phone-input/phone-input.module.scss"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(phone_input_module.Z,options);const phone_input_phone_input_module=phone_input_module.Z&&phone_input_module.Z.locals?phone_input_module.Z.locals:void 0;var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const cx=bind_default().bind(phone_input_phone_input_module);function phone_input_PhoneInput({value,defaultValue,label="Телефон",inputRef:inputRefProp,blockRef:blockRefProp,onBlur,onChange,onFocus,onCountrySelect,"data-testid":testId="phone-input",...props}){const firstRenderRef=(0,react.useRef)(!0),[initialValue]=(0,react.useState)(value??defaultValue??""),[country,setCountry]=(0,react.useState)((()=>(0,utils.yE)(initialValue))),[cleanValue,setCleanValue]=(0,react.useState)((()=>utils.K9.removeCode(initialValue,country))),inputRef=(0,react.useRef)(null);(0,react.useImperativeHandle)(inputRefProp,(()=>inputRef.current));const blockRef=(0,react.useRef)(null);(0,react.useImperativeHandle)(blockRefProp,(()=>blockRef.current)),(0,hooks.LI)((()=>{void 0!==value&&setCleanValue(utils.K9.removeCode(value,country))}),[value]);const dispatchCountryChange=(0,react.useCallback)((input=>{const nativeEvent=new Event("input"),syntheticEvent=(0,utils.bk)(input,nativeEvent);onChange?.(syntheticEvent,{value:input.value,cleanValue:utils.K9.addCode("",country),completed:!1}),onCountrySelect?.(country)}),[onChange,onCountrySelect,country]);(0,hooks.LI)((()=>{firstRenderRef.current||inputRef.current&&dispatchCountryChange(inputRef.current)}),[country]),(0,hooks.LI)((()=>{firstRenderRef.current=!1}),[]);const processData=(0,react.useCallback)((data=>({...data,completed:data.completed||country.id===presets.YD.other,cleanValue:utils.K9.addCode(data.cleanValue,country)})),[country]),changeCountry=(0,react.useCallback)((selected=>{setCountry(selected),setCleanValue("")}),[]);return(0,jsx_runtime.jsx)(src_select.P,{opener:(0,jsx_runtime.jsx)(PhoneMaskedInput,{...props,"data-testid":testId,country,inputRef,blockRef,label,mask:country.mask,onFocus:(event,data)=>{onFocus?.(event,processData(data))},onChange:(event,data)=>{onChange?.(event,processData(data))},onBlur:(event,data)=>{onBlur?.(event,processData(data))},value:cleanValue}),onValueChange:itemValue=>{const item=presets.Tw.find((c=>c.id===itemValue));item&&changeCountry(item)},children:presets.Tw.map(((item,index)=>(0,jsx_runtime.jsx)(dropdown_item.h,{value:item.id,size:"m",role:"menuitem",onMouseDown:event=>{event.preventDefault()},selected:item.id===country.id,startContent:(0,jsx_runtime.jsx)("img",{alt:"",width:24,height:24,src:item.imageSrc}),endContent:item.code,children:item.name},index)))})}function PhoneMaskedInput({country,blockRef:blockRefProp,...props}){const select=(0,react.useContext)(select_utils.Z),blockRef=(0,react.useRef)(null),[openerFocused,setOpenerFocused]=(0,react.useState)(!1);(0,react.useImperativeHandle)(blockRefProp,(()=>blockRef.current)),(0,react.useImperativeHandle)(select.anchorRef,(()=>blockRef.current));const ArrowSVG=select.opened?Up.Z:Down.Z;return(0,jsx_runtime.jsx)(masked_input.C,{...props,focused:select.opened||openerFocused||void 0,blockRef,baseInputProps:{restPlaceholder:country.id===presets.YD.other?"":void 0,...props.baseInputProps},adornmentEnd:(0,jsx_runtime.jsxs)("div",{ref:select.openerRef,tabIndex:0,onFocus:()=>setOpenerFocused(!0),onBlur:()=>setOpenerFocused(!1),role:"combobox","aria-label":"Выбор страны",className:cx("opener"),"data-testid":"phone-input:menu-opener",onKeyDown:select.onKeyDown,onMouseDown:select.onMouseDown,children:[(0,jsx_runtime.jsx)("img",{alt:"",width:24,height:24,src:country.imageSrc}),(0,jsx_runtime.jsx)(ArrowSVG,{className:phone_input_phone_input_module.arrow})]})})}phone_input_PhoneInput.displayName="PhoneInput",PhoneMaskedInput.displayName="PhoneMaskedInput";try{phone_input_PhoneInput.displayName="PhoneInput",phone_input_PhoneInput.__docgenInfo={description:"Поле ввода номера телефона.",displayName:"PhoneInput",props:{onCountrySelect:{defaultValue:null,description:"Сработает при выборе страны из выпадающего списка.",name:"onCountrySelect",required:!1,type:{name:"((country: Country) => void) | undefined"}},style:{defaultValue:null,description:"Стили корневого элемента.",name:"style",required:!1,type:{name:"FieldBlockStyle | undefined"}},className:{defaultValue:null,description:"CSS-класс корневого элемента.",name:"className",required:!1,type:{name:"string | undefined"}},"data-testid":{defaultValue:null,description:"Идентификатор для систем автоматизированного тестирования.",name:"data-testid",required:!1,type:{name:"string | undefined"}},size:{defaultValue:null,description:"Размер.",name:"size",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"s"'},{value:'"l"'},{value:'"m"'}]}},type:{defaultValue:null,description:"Тип поля.",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"search"'},{value:'"text"'},{value:'"tel"'},{value:'"email"'},{value:'"password"'}]}},value:{defaultValue:null,description:"Значение.",name:"value",required:!1,type:{name:"string | undefined"}},onChange:{defaultValue:null,description:"Сработает при вводе. Вторым аргументом получит данные поля с маской.",name:"onChange",required:!1,type:{name:"((event: ChangeEvent<HTMLInputElement>, data: MaskData) => void) | undefined"}},defaultValue:{defaultValue:null,description:"Значение по умолчанию.",name:"defaultValue",required:!1,type:{name:"string | undefined"}},onFocus:{defaultValue:null,description:"Сработает при фокусе. Вторым аргументом получит данные поля с маской.",name:"onFocus",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement, Element>, data: MaskData) => void) | undefined"}},onBlur:{defaultValue:null,description:'Сработает при "blur". Вторым аргументом получит данные поля с маской.',name:"onBlur",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement, Element>, data: MaskData) => void) | undefined"}},failed:{defaultValue:null,description:"Состояние с ошибкой.",name:"failed",required:!1,type:{name:"boolean | undefined"}},caption:{defaultValue:null,description:"Подпись под полем.",name:"caption",required:!1,type:{name:"string | undefined"}},label:{defaultValue:{value:"Телефон"},description:"Ярлык в поле.",name:"label",required:!1,type:{name:"string | undefined"}},main:{defaultValue:null,description:"Основное содержимое.",name:"main",required:!1,type:{name:"ReactNode"}},focused:{defaultValue:null,description:"Состояние фокуса.",name:"focused",required:!1,type:{name:"boolean | undefined"}},baseInputProps:{defaultValue:null,description:"Свойства BaseInputProps.",name:"baseInputProps",required:!1,type:{name:"BaseInputAsInputProps | undefined"}},blockProps:{defaultValue:null,description:"Опции элемента блока поля.",name:"blockProps",required:!1,type:{name:"NoChildren<WithStyle<HTMLAttributes<HTMLDivElement>>> | undefined"}},inputRef:{defaultValue:null,description:"Ref элемента input.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement> | undefined"}},rootProps:{defaultValue:null,description:"Опции корневого элемента.",name:"rootProps",required:!1,type:{name:"NoChildren<WithStyle<HTMLAttributes<HTMLDivElement>>> | undefined"}},labelAsPlaceholder:{defaultValue:null,description:"Выводить ярлык вместо placeholder или введенного значения.",name:"labelAsPlaceholder",required:!1,type:{name:"boolean | undefined"}},labelProps:{defaultValue:null,description:"Опции элемента ярлыка.",name:"labelProps",required:!1,type:{name:"NoChildren<LabelHTMLAttributes<HTMLLabelElement>> | undefined"}},fixedHeight:{defaultValue:null,description:"Фиксировать высоту.",name:"fixedHeight",required:!1,type:{name:"boolean | undefined"}},rootRef:{defaultValue:null,description:"Ref корневого элемента.",name:"rootRef",required:!1,type:{name:"Ref<HTMLDivElement> | undefined"}},blockRef:{defaultValue:null,description:"Ref элемента блока поля.",name:"blockRef",required:!1,type:{name:"Ref<HTMLDivElement> | undefined"}},adornmentStart:{defaultValue:null,description:"Украшение перед основным содержимым.",name:"adornmentStart",required:!1,type:{name:"ReactNode"}},adornmentEnd:{defaultValue:null,description:"Украшение после основного содержимого.",name:"adornmentEnd",required:!1,type:{name:"ReactNode"}},mainProps:{defaultValue:null,description:"Опции основного содержимого.",name:"mainProps",required:!1,type:{name:"NoChildren<WithStyle<HTMLAttributes<HTMLDivElement>>> | undefined"}},clearable:{defaultValue:null,description:"Нужно ли выводить кнопку очистки поля.",name:"clearable",required:!1,type:{name:"boolean | undefined"}},onClear:{defaultValue:null,description:"Сработает при очистке поля.",name:"onClear",required:!1,type:{name:"MouseEventHandler<SVGSVGElement> | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/phone-input/phone-input.tsx#PhoneInput"]={docgenInfo:phone_input_PhoneInput.__docgenInfo,name:"PhoneInput",path:"src/phone-input/phone-input.tsx#PhoneInput"})}catch(__react_docgen_typescript_loader_error){}try{PhoneInput.displayName="PhoneInput",PhoneInput.__docgenInfo={description:"Поле ввода номера телефона.",displayName:"PhoneInput",props:{onCountrySelect:{defaultValue:null,description:"Сработает при выборе страны из выпадающего списка.",name:"onCountrySelect",required:!1,type:{name:"((country: Country) => void) | undefined"}},style:{defaultValue:null,description:"Стили корневого элемента.",name:"style",required:!1,type:{name:"FieldBlockStyle | undefined"}},className:{defaultValue:null,description:"CSS-класс корневого элемента.",name:"className",required:!1,type:{name:"string | undefined"}},"data-testid":{defaultValue:null,description:"Идентификатор для систем автоматизированного тестирования.",name:"data-testid",required:!1,type:{name:"string | undefined"}},size:{defaultValue:null,description:"Размер.",name:"size",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"s"'},{value:'"l"'},{value:'"m"'}]}},type:{defaultValue:null,description:"Тип поля.",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"search"'},{value:'"text"'},{value:'"tel"'},{value:'"email"'},{value:'"password"'}]}},value:{defaultValue:null,description:"Значение.",name:"value",required:!1,type:{name:"string | undefined"}},onChange:{defaultValue:null,description:"Сработает при вводе. Вторым аргументом получит данные поля с маской.",name:"onChange",required:!1,type:{name:"((event: ChangeEvent<HTMLInputElement>, data: MaskData) => void) | undefined"}},defaultValue:{defaultValue:null,description:"Значение по умолчанию.",name:"defaultValue",required:!1,type:{name:"string | undefined"}},onFocus:{defaultValue:null,description:"Сработает при фокусе. Вторым аргументом получит данные поля с маской.",name:"onFocus",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement, Element>, data: MaskData) => void) | undefined"}},onBlur:{defaultValue:null,description:'Сработает при "blur". Вторым аргументом получит данные поля с маской.',name:"onBlur",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement, Element>, data: MaskData) => void) | undefined"}},failed:{defaultValue:null,description:"Состояние с ошибкой.",name:"failed",required:!1,type:{name:"boolean | undefined"}},caption:{defaultValue:null,description:"Подпись под полем.",name:"caption",required:!1,type:{name:"string | undefined"}},label:{defaultValue:{value:"Телефон"},description:"Ярлык в поле.",name:"label",required:!1,type:{name:"string | undefined"}},main:{defaultValue:null,description:"Основное содержимое.",name:"main",required:!1,type:{name:"ReactNode"}},focused:{defaultValue:null,description:"Состояние фокуса.",name:"focused",required:!1,type:{name:"boolean | undefined"}},baseInputProps:{defaultValue:null,description:"Свойства BaseInputProps.",name:"baseInputProps",required:!1,type:{name:"BaseInputAsInputProps | undefined"}},blockProps:{defaultValue:null,description:"Опции элемента блока поля.",name:"blockProps",required:!1,type:{name:"NoChildren<WithStyle<HTMLAttributes<HTMLDivElement>>> | undefined"}},inputRef:{defaultValue:null,description:"Ref элемента input.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement> | undefined"}},rootProps:{defaultValue:null,description:"Опции корневого элемента.",name:"rootProps",required:!1,type:{name:"NoChildren<WithStyle<HTMLAttributes<HTMLDivElement>>> | undefined"}},labelAsPlaceholder:{defaultValue:null,description:"Выводить ярлык вместо placeholder или введенного значения.",name:"labelAsPlaceholder",required:!1,type:{name:"boolean | undefined"}},labelProps:{defaultValue:null,description:"Опции элемента ярлыка.",name:"labelProps",required:!1,type:{name:"NoChildren<LabelHTMLAttributes<HTMLLabelElement>> | undefined"}},fixedHeight:{defaultValue:null,description:"Фиксировать высоту.",name:"fixedHeight",required:!1,type:{name:"boolean | undefined"}},rootRef:{defaultValue:null,description:"Ref корневого элемента.",name:"rootRef",required:!1,type:{name:"Ref<HTMLDivElement> | undefined"}},blockRef:{defaultValue:null,description:"Ref элемента блока поля.",name:"blockRef",required:!1,type:{name:"Ref<HTMLDivElement> | undefined"}},adornmentStart:{defaultValue:null,description:"Украшение перед основным содержимым.",name:"adornmentStart",required:!1,type:{name:"ReactNode"}},adornmentEnd:{defaultValue:null,description:"Украшение после основного содержимого.",name:"adornmentEnd",required:!1,type:{name:"ReactNode"}},mainProps:{defaultValue:null,description:"Опции основного содержимого.",name:"mainProps",required:!1,type:{name:"NoChildren<WithStyle<HTMLAttributes<HTMLDivElement>>> | undefined"}},clearable:{defaultValue:null,description:"Нужно ли выводить кнопку очистки поля.",name:"clearable",required:!1,type:{name:"boolean | undefined"}},onClear:{defaultValue:null,description:"Сработает при очистке поля.",name:"onClear",required:!1,type:{name:"MouseEventHandler<SVGSVGElement> | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/phone-input/index.tsx#PhoneInput"]={docgenInfo:PhoneInput.__docgenInfo,name:"PhoneInput",path:"src/phone-input/index.tsx#PhoneInput"})}catch(__react_docgen_typescript_loader_error){}var text_button=__webpack_require__("./src/text-button/index.tsx");const index_stories={title:"common/PhoneInput",component:phone_input_PhoneInput,parameters:{storySource:{source:"import { PhoneInput } from '@sima-land/ui-nucleons/phone-input';\nimport { TextButton } from '@sima-land/ui-nucleons/text-button';\nimport { useState } from 'react';\nexport default {\n  title: 'common/PhoneInput',\n  component: PhoneInput,\n  parameters: {\n    layout: 'padded'\n  }\n};\nexport function Primary() {\n  const defaultValue = '79998887766';\n  const [key, setKey] = useState<number>(0);\n  const [value, setValue] = useState<string>(defaultValue);\n  return <>\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\n      setValue(data.cleanValue);\n    }} style={{\n      width: '320px'\n    }} />\n\n      <p data-testid='phone:clean-value'>Значение: {value || '[пусто]'}</p>\n\n      <TextButton size='s' data-testid='phone:reset' onClick={() => {\n      setKey(n => n + 1);\n      setValue(defaultValue);\n    }}>\n        Сбросить\n      </TextButton>\n    </>;\n}\nPrimary.storyName = 'Простой пример';\nexport function Validation() {\n  const [value, setValue] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  return <PhoneInput style={{\n    width: 320\n  }} value={value} onFocus={() => {\n    setError(null);\n  }} onChange={(event, data) => {\n    setValue(data.cleanValue);\n    setError(null);\n  }} onBlur={(event, data) => {\n    !data.completed && setError('Поле не заполнено');\n  }} failed={Boolean(error)} caption={error || 'Мы не будем звонить по этому номеру'} />;\n}\nValidation.storyName = 'Пример: проверка заполнения';\nexport function DefineCountryMask() {\n  return <>\n      <article>\n        <h3>Пустое значение - «Россия» по умолчанию</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='' />\n      </article>\n      <article>\n        <h3>Армения</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='37422333444' />\n      </article>\n      <article>\n        <h3>Грузия</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='995111222333' />\n      </article>\n      <article>\n        <h3>Узбекистан</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='998556667777' />\n      </article>\n      <article>\n        <h3>Неизвестный номер - «Другое»</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='1234567890' />\n      </article>\n    </>;\n}\nDefineCountryMask.storyName = 'Пример: определение маски';\nexport function NativeNumberInputComparison() {\n  // PhoneInput\n  const defaultValue = '79501922700';\n  const [value, setValue] = useState<string>(defaultValue);\n  const [key, setKey] = useState<number>(0);\n\n  // input[type=number]\n  const defaultText = 'Hello';\n  const [text, setText] = useState<string>(defaultText);\n  return <>\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\n      setValue(data.cleanValue);\n    }} style={{\n      width: '320px'\n    }} />\n\n      <p>Значение: {value || '[пусто]'}</p>\n\n      <TextButton size='s' onClick={() => {\n      setValue(defaultValue);\n      setKey(n => n + 1);\n    }}>\n        Сбросить\n      </TextButton>\n\n      <p>\n        {/* Firefox позволяет вводить в input[type=number] нечисловые значения */}\n        <input type='number' value={text} onChange={event => {\n        setText(event.target.value);\n      }} />\n      </p>\n\n      <p>Значение: {text || '[пусто]'}</p>\n\n      <TextButton size='s' onClick={() => {\n      setText(defaultText);\n    }}>\n        Сбросить\n      </TextButton>\n    </>;\n}\nNativeNumberInputComparison.storyName = 'Тест: сравнение с input[type=number]';\nPrimary.parameters = {\n  ...Primary.parameters,\n  docs: {\n    ...Primary.parameters?.docs,\n    source: {\n      originalSource: \"function Primary() {\\n  const defaultValue = '79998887766';\\n  const [key, setKey] = useState<number>(0);\\n  const [value, setValue] = useState<string>(defaultValue);\\n  return <>\\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\\n      setValue(data.cleanValue);\\n    }} style={{\\n      width: '320px'\\n    }} />\\n\\n      <p data-testid='phone:clean-value'>\\u0417\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435: {value || '[\\u043F\\u0443\\u0441\\u0442\\u043E]'}</p>\\n\\n      <TextButton size='s' data-testid='phone:reset' onClick={() => {\\n      setKey(n => n + 1);\\n      setValue(defaultValue);\\n    }}>\\n        \\u0421\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C\\n      </TextButton>\\n    </>;\\n}\",\n      ...Primary.parameters?.docs?.source\n    }\n  }\n};\nValidation.parameters = {\n  ...Validation.parameters,\n  docs: {\n    ...Validation.parameters?.docs,\n    source: {\n      originalSource: \"function Validation() {\\n  const [value, setValue] = useState('');\\n  const [error, setError] = useState<string | null>(null);\\n  return <PhoneInput style={{\\n    width: 320\\n  }} value={value} onFocus={() => {\\n    setError(null);\\n  }} onChange={(event, data) => {\\n    setValue(data.cleanValue);\\n    setError(null);\\n  }} onBlur={(event, data) => {\\n    !data.completed && setError('\\u041F\\u043E\\u043B\\u0435 \\u043D\\u0435 \\u0437\\u0430\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u043E');\\n  }} failed={Boolean(error)} caption={error || '\\u041C\\u044B \\u043D\\u0435 \\u0431\\u0443\\u0434\\u0435\\u043C \\u0437\\u0432\\u043E\\u043D\\u0438\\u0442\\u044C \\u043F\\u043E \\u044D\\u0442\\u043E\\u043C\\u0443 \\u043D\\u043E\\u043C\\u0435\\u0440\\u0443'} />;\\n}\",\n      ...Validation.parameters?.docs?.source\n    }\n  }\n};\nDefineCountryMask.parameters = {\n  ...DefineCountryMask.parameters,\n  docs: {\n    ...DefineCountryMask.parameters?.docs,\n    source: {\n      originalSource: \"function DefineCountryMask() {\\n  return <>\\n      <article>\\n        <h3>\\u041F\\u0443\\u0441\\u0442\\u043E\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 - \\xAB\\u0420\\u043E\\u0441\\u0441\\u0438\\u044F\\xBB \\u043F\\u043E \\u0443\\u043C\\u043E\\u043B\\u0447\\u0430\\u043D\\u0438\\u044E</h3>\\n        <PhoneInput style={{\\n        width: 320\\n      }} defaultValue='' />\\n      </article>\\n      <article>\\n        <h3>\\u0410\\u0440\\u043C\\u0435\\u043D\\u0438\\u044F</h3>\\n        <PhoneInput style={{\\n        width: 320\\n      }} defaultValue='37422333444' />\\n      </article>\\n      <article>\\n        <h3>\\u0413\\u0440\\u0443\\u0437\\u0438\\u044F</h3>\\n        <PhoneInput style={{\\n        width: 320\\n      }} defaultValue='995111222333' />\\n      </article>\\n      <article>\\n        <h3>\\u0423\\u0437\\u0431\\u0435\\u043A\\u0438\\u0441\\u0442\\u0430\\u043D</h3>\\n        <PhoneInput style={{\\n        width: 320\\n      }} defaultValue='998556667777' />\\n      </article>\\n      <article>\\n        <h3>\\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440 - \\xAB\\u0414\\u0440\\u0443\\u0433\\u043E\\u0435\\xBB</h3>\\n        <PhoneInput style={{\\n        width: 320\\n      }} defaultValue='1234567890' />\\n      </article>\\n    </>;\\n}\",\n      ...DefineCountryMask.parameters?.docs?.source\n    }\n  }\n};\nNativeNumberInputComparison.parameters = {\n  ...NativeNumberInputComparison.parameters,\n  docs: {\n    ...NativeNumberInputComparison.parameters?.docs,\n    source: {\n      originalSource: \"function NativeNumberInputComparison() {\\n  // PhoneInput\\n  const defaultValue = '79501922700';\\n  const [value, setValue] = useState<string>(defaultValue);\\n  const [key, setKey] = useState<number>(0);\\n\\n  // input[type=number]\\n  const defaultText = 'Hello';\\n  const [text, setText] = useState<string>(defaultText);\\n  return <>\\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\\n      setValue(data.cleanValue);\\n    }} style={{\\n      width: '320px'\\n    }} />\\n\\n      <p>\\u0417\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435: {value || '[\\u043F\\u0443\\u0441\\u0442\\u043E]'}</p>\\n\\n      <TextButton size='s' onClick={() => {\\n      setValue(defaultValue);\\n      setKey(n => n + 1);\\n    }}>\\n        \\u0421\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C\\n      </TextButton>\\n\\n      <p>\\n        {/* Firefox \\u043F\\u043E\\u0437\\u0432\\u043E\\u043B\\u044F\\u0435\\u0442 \\u0432\\u0432\\u043E\\u0434\\u0438\\u0442\\u044C \\u0432 input[type=number] \\u043D\\u0435\\u0447\\u0438\\u0441\\u043B\\u043E\\u0432\\u044B\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u044F */}\\n        <input type='number' value={text} onChange={event => {\\n        setText(event.target.value);\\n      }} />\\n      </p>\\n\\n      <p>\\u0417\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435: {text || '[\\u043F\\u0443\\u0441\\u0442\\u043E]'}</p>\\n\\n      <TextButton size='s' onClick={() => {\\n      setText(defaultText);\\n    }}>\\n        \\u0421\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C\\n      </TextButton>\\n    </>;\\n}\",\n      ...NativeNumberInputComparison.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{primary:{startLoc:{col:7,line:11},endLoc:{col:1,line:31},startBody:{col:7,line:11},endBody:{col:1,line:31}},validation:{startLoc:{col:7,line:33},endLoc:{col:1,line:46},startBody:{col:7,line:33},endBody:{col:1,line:46}},"define-country-mask":{startLoc:{col:7,line:48},endLoc:{col:1,line:81},startBody:{col:7,line:48},endBody:{col:1,line:81}},"native-number-input-comparison":{startLoc:{col:7,line:83},endLoc:{col:1,line:123},startBody:{col:7,line:83},endBody:{col:1,line:123}}}},layout:"padded"}},Primary=function Primary(){const[key,setKey]=(0,react.useState)(0),[value,setValue]=(0,react.useState)("79998887766");return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(phone_input_PhoneInput,{value,onChange:(event,data)=>{setValue(data.cleanValue)},style:{width:"320px"}},key),(0,jsx_runtime.jsxs)("p",{"data-testid":"phone:clean-value",children:["Значение: ",value||"[пусто]"]}),(0,jsx_runtime.jsx)(text_button.A,{size:"s","data-testid":"phone:reset",onClick:()=>{setKey((n=>n+1)),setValue("79998887766")},children:"Сбросить"})]})};Primary.storyName="Простой пример";const Validation=function Validation(){const[value,setValue]=(0,react.useState)(""),[error,setError]=(0,react.useState)(null);return(0,jsx_runtime.jsx)(phone_input_PhoneInput,{style:{width:320},value,onFocus:()=>{setError(null)},onChange:(event,data)=>{setValue(data.cleanValue),setError(null)},onBlur:(event,data)=>{!data.completed&&setError("Поле не заполнено")},failed:Boolean(error),caption:error||"Мы не будем звонить по этому номеру"})};Validation.displayName="Validation",Validation.storyName="Пример: проверка заполнения";const DefineCountryMask=function DefineCountryMask(){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)("article",{children:[(0,jsx_runtime.jsx)("h3",{children:"Пустое значение - «Россия» по умолчанию"}),(0,jsx_runtime.jsx)(phone_input_PhoneInput,{style:{width:320},defaultValue:""})]}),(0,jsx_runtime.jsxs)("article",{children:[(0,jsx_runtime.jsx)("h3",{children:"Армения"}),(0,jsx_runtime.jsx)(phone_input_PhoneInput,{style:{width:320},defaultValue:"37422333444"})]}),(0,jsx_runtime.jsxs)("article",{children:[(0,jsx_runtime.jsx)("h3",{children:"Грузия"}),(0,jsx_runtime.jsx)(phone_input_PhoneInput,{style:{width:320},defaultValue:"995111222333"})]}),(0,jsx_runtime.jsxs)("article",{children:[(0,jsx_runtime.jsx)("h3",{children:"Узбекистан"}),(0,jsx_runtime.jsx)(phone_input_PhoneInput,{style:{width:320},defaultValue:"998556667777"})]}),(0,jsx_runtime.jsxs)("article",{children:[(0,jsx_runtime.jsx)("h3",{children:"Неизвестный номер - «Другое»"}),(0,jsx_runtime.jsx)(phone_input_PhoneInput,{style:{width:320},defaultValue:"1234567890"})]})]})};DefineCountryMask.storyName="Пример: определение маски";const NativeNumberInputComparison=function NativeNumberInputComparison(){const[value,setValue]=(0,react.useState)("79501922700"),[key,setKey]=(0,react.useState)(0),[text,setText]=(0,react.useState)("Hello");return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(phone_input_PhoneInput,{value,onChange:(event,data)=>{setValue(data.cleanValue)},style:{width:"320px"}},key),(0,jsx_runtime.jsxs)("p",{children:["Значение: ",value||"[пусто]"]}),(0,jsx_runtime.jsx)(text_button.A,{size:"s",onClick:()=>{setValue("79501922700"),setKey((n=>n+1))},children:"Сбросить"}),(0,jsx_runtime.jsx)("p",{children:(0,jsx_runtime.jsx)("input",{type:"number",value:text,onChange:event=>{setText(event.target.value)}})}),(0,jsx_runtime.jsxs)("p",{children:["Значение: ",text||"[пусто]"]}),(0,jsx_runtime.jsx)(text_button.A,{size:"s",onClick:()=>{setText("Hello")},children:"Сбросить"})]})};NativeNumberInputComparison.storyName="Тест: сравнение с input[type=number]",Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"function Primary() {\n  const defaultValue = '79998887766';\n  const [key, setKey] = useState<number>(0);\n  const [value, setValue] = useState<string>(defaultValue);\n  return <>\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\n      setValue(data.cleanValue);\n    }} style={{\n      width: '320px'\n    }} />\n\n      <p data-testid='phone:clean-value'>Значение: {value || '[пусто]'}</p>\n\n      <TextButton size='s' data-testid='phone:reset' onClick={() => {\n      setKey(n => n + 1);\n      setValue(defaultValue);\n    }}>\n        Сбросить\n      </TextButton>\n    </>;\n}",...Primary.parameters?.docs?.source}}},Validation.parameters={...Validation.parameters,docs:{...Validation.parameters?.docs,source:{originalSource:"function Validation() {\n  const [value, setValue] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  return <PhoneInput style={{\n    width: 320\n  }} value={value} onFocus={() => {\n    setError(null);\n  }} onChange={(event, data) => {\n    setValue(data.cleanValue);\n    setError(null);\n  }} onBlur={(event, data) => {\n    !data.completed && setError('Поле не заполнено');\n  }} failed={Boolean(error)} caption={error || 'Мы не будем звонить по этому номеру'} />;\n}",...Validation.parameters?.docs?.source}}},DefineCountryMask.parameters={...DefineCountryMask.parameters,docs:{...DefineCountryMask.parameters?.docs,source:{originalSource:"function DefineCountryMask() {\n  return <>\n      <article>\n        <h3>Пустое значение - «Россия» по умолчанию</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='' />\n      </article>\n      <article>\n        <h3>Армения</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='37422333444' />\n      </article>\n      <article>\n        <h3>Грузия</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='995111222333' />\n      </article>\n      <article>\n        <h3>Узбекистан</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='998556667777' />\n      </article>\n      <article>\n        <h3>Неизвестный номер - «Другое»</h3>\n        <PhoneInput style={{\n        width: 320\n      }} defaultValue='1234567890' />\n      </article>\n    </>;\n}",...DefineCountryMask.parameters?.docs?.source}}},NativeNumberInputComparison.parameters={...NativeNumberInputComparison.parameters,docs:{...NativeNumberInputComparison.parameters?.docs,source:{originalSource:"function NativeNumberInputComparison() {\n  // PhoneInput\n  const defaultValue = '79501922700';\n  const [value, setValue] = useState<string>(defaultValue);\n  const [key, setKey] = useState<number>(0);\n\n  // input[type=number]\n  const defaultText = 'Hello';\n  const [text, setText] = useState<string>(defaultText);\n  return <>\n      <PhoneInput key={key} value={value} onChange={(event, data) => {\n      setValue(data.cleanValue);\n    }} style={{\n      width: '320px'\n    }} />\n\n      <p>Значение: {value || '[пусто]'}</p>\n\n      <TextButton size='s' onClick={() => {\n      setValue(defaultValue);\n      setKey(n => n + 1);\n    }}>\n        Сбросить\n      </TextButton>\n\n      <p>\n        {/* Firefox позволяет вводить в input[type=number] нечисловые значения */}\n        <input type='number' value={text} onChange={event => {\n        setText(event.target.value);\n      }} />\n      </p>\n\n      <p>Значение: {text || '[пусто]'}</p>\n\n      <TextButton size='s' onClick={() => {\n      setText(defaultText);\n    }}>\n        Сбросить\n      </TextButton>\n    </>;\n}",...NativeNumberInputComparison.parameters?.docs?.source}}};const __namedExportsOrder=["Primary","Validation","DefineCountryMask","NativeNumberInputComparison"]},"./src/masked-input/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{C:()=>MaskedInput});var react=__webpack_require__("./node_modules/react/index.js"),input=__webpack_require__("./src/input/index.tsx"),utils=__webpack_require__("./node_modules/@krutoo/input-mask/dist/dom/utils.js"),hooks=__webpack_require__("./src/hooks/index.ts"),on=__webpack_require__("./src/helpers/on.ts"),core=__webpack_require__("./node_modules/@krutoo/input-mask/dist/core/index.js"),redux=__webpack_require__("./node_modules/redux/es/redux.js");const actions={manualChange:createAction("manual/change"),inputChange:createAction("input/change"),inputSelectionChange:createAction("input/selection-change")};function createInputMaskStore(options,initialState){const reducer=function createDomReducer(options){const innerReducer=(0,core.createReducer)(options);function processState(a,b){return innerReducer(a,(0,core.defineChanges)(a,b))}const initialState=utils.State.init(options);return function reducer(state=initialState,action){let result=state;if(actions.inputChange.is(action))result=processState(state,utils.State.fromTarget(action.payload.input));else if(actions.inputSelectionChange.is(action))result=utils.State.fromTarget(action.payload.input);else if(actions.manualChange.is(action)){const validCleanValue=action.payload.value.split("").filter((c=>c.match(options.pattern))).join(""),newMaskedValue=utils.Value.toMasked(options,validCleanValue),firstPlace=options.mask.indexOf(options.placeholder);result=processState(utils.State.of(state.value,utils.Range.of(firstPlace,state.value.length)),utils.State.of(newMaskedValue,utils.Range.of(newMaskedValue.length)))}return result}}(options);return(0,redux.jB)(reducer,initialState)}function createAction(type){const creator=payload=>({type,payload});return creator.is=action=>action.type===type,creator}var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function MaskedInput({mask,placeholder="_",pattern="\\d",value,defaultValue,baseInputProps,onFocus,onChange,onBlur,inputRef,...props}){const{store,bind}=function useInputMask({maskOptions:maskOptionsProp,value,defaultValue}){const maskOptions=(0,react.useMemo)((()=>({mask:maskOptionsProp.mask,pattern:new RegExp(maskOptionsProp.pattern),placeholder:maskOptionsProp.placeholder})),[maskOptionsProp.mask,maskOptionsProp.pattern,maskOptionsProp.placeholder]),input=(0,react.useRef)(null),[initialValue]=(0,react.useState)(defaultValue),createStore=(0,react.useCallback)((()=>{const newStore=createInputMaskStore(maskOptions);return newStore.dispatch(actions.manualChange({value:value??initialValue??""})),newStore}),[maskOptions,value,initialValue]),store=(0,react.useMemo)(createStore,[maskOptions]),[,setState]=(0,react.useState)((()=>store.getState()));(0,hooks.LI)((()=>{const offList=[store.subscribe((()=>{setState(store.getState()),input.current&&utils.State.applyDiff(store.getState(),input.current)})),(0,on.on)(document,"selectionchange",(()=>{input.current&&input.current===document.activeElement&&store.dispatch(actions.inputSelectionChange({input:input.current}))}))];return()=>offList.forEach((fn=>fn()))}),[store]);const onValuePropChange=(0,react.useCallback)((()=>{void 0!==value&&value!==utils.Value.toClean(maskOptions,store.getState().value)&&store.dispatch(actions.manualChange({value}))}),[value,store,maskOptions]);(0,hooks.LI)(onValuePropChange,[value]);const onChange=(0,react.useCallback)((event=>{store.dispatch(actions.inputChange({input:event.target}))}),[store]);return{store,bind:{ref:input,value:store.getState().value,onChange}}}({value,defaultValue,maskOptions:{mask,pattern,placeholder}});(0,react.useImperativeHandle)(inputRef,(()=>bind.ref.current));const getData=(0,react.useCallback)((()=>({value:store.getState().value,cleanValue:utils.Value.toClean({mask,placeholder},store.getState().value),completed:store.getState().value.length===mask.length})),[store,mask,placeholder]);return(0,jsx_runtime.jsx)(input.I,{...props,baseInputProps:{...baseInputProps,restPlaceholder:baseInputProps?.restPlaceholder??{value:mask.slice(store.getState().value.length),shiftValue:store.getState().value}},inputRef:bind.ref,value:bind.value,onFocus:event=>{onFocus?.(event,getData())},onChange:event=>{bind.onChange(event),onChange?.(event,getData())},onBlur:event=>{onBlur?.(event,getData())}})}MaskedInput.displayName="MaskedInput";try{MaskedInput.displayName="MaskedInput",MaskedInput.__docgenInfo={description:"Поле ввода текста по маске.",displayName:"MaskedInput",props:{onFocus:{defaultValue:null,description:"Сработает при фокусе. Вторым аргументом получит данные поля с маской.",name:"onFocus",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement, Element>, data: MaskData) => void) | undefined"}},onChange:{defaultValue:null,description:"Сработает при вводе. Вторым аргументом получит данные поля с маской.",name:"onChange",required:!1,type:{name:"((event: ChangeEvent<HTMLInputElement>, data: MaskData) => void) | undefined"}},onBlur:{defaultValue:null,description:'Сработает при "blur". Вторым аргументом получит данные поля с маской.',name:"onBlur",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement, Element>, data: MaskData) => void) | undefined"}},style:{defaultValue:null,description:"Стили корневого элемента.",name:"style",required:!1,type:{name:"FieldBlockStyle | undefined"}},className:{defaultValue:null,description:"CSS-класс корневого элемента.",name:"className",required:!1,type:{name:"string | undefined"}},"data-testid":{defaultValue:null,description:"Идентификатор для систем автоматизированного тестирования.",name:"data-testid",required:!1,type:{name:"string | undefined"}},size:{defaultValue:null,description:"Размер.",name:"size",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"s"'},{value:'"l"'},{value:'"m"'}]}},type:{defaultValue:null,description:"Тип поля.",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"search"'},{value:'"text"'},{value:'"tel"'},{value:'"email"'},{value:'"password"'}]}},value:{defaultValue:null,description:"Значение.",name:"value",required:!1,type:{name:"string | undefined"}},defaultValue:{defaultValue:null,description:"Значение по умолчанию.",name:"defaultValue",required:!1,type:{name:"string | undefined"}},failed:{defaultValue:null,description:"Состояние с ошибкой.",name:"failed",required:!1,type:{name:"boolean | undefined"}},caption:{defaultValue:null,description:"Подпись под полем.",name:"caption",required:!1,type:{name:"string | undefined"}},label:{defaultValue:null,description:"Ярлык в поле.",name:"label",required:!1,type:{name:"string | undefined"}},main:{defaultValue:null,description:"Основное содержимое.",name:"main",required:!1,type:{name:"ReactNode"}},focused:{defaultValue:null,description:"Состояние фокуса.",name:"focused",required:!1,type:{name:"boolean | undefined"}},baseInputProps:{defaultValue:null,description:"Свойства BaseInputProps.",name:"baseInputProps",required:!1,type:{name:"BaseInputAsInputProps | undefined"}},blockProps:{defaultValue:null,description:"Опции элемента блока поля.",name:"blockProps",required:!1,type:{name:"NoChildren<WithStyle<HTMLAttributes<HTMLDivElement>>> | undefined"}},inputRef:{defaultValue:null,description:"Ref элемента input.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement> | undefined"}},rootProps:{defaultValue:null,description:"Опции корневого элемента.",name:"rootProps",required:!1,type:{name:"NoChildren<WithStyle<HTMLAttributes<HTMLDivElement>>> | undefined"}},labelAsPlaceholder:{defaultValue:null,description:"Выводить ярлык вместо placeholder или введенного значения.",name:"labelAsPlaceholder",required:!1,type:{name:"boolean | undefined"}},labelProps:{defaultValue:null,description:"Опции элемента ярлыка.",name:"labelProps",required:!1,type:{name:"NoChildren<LabelHTMLAttributes<HTMLLabelElement>> | undefined"}},fixedHeight:{defaultValue:null,description:"Фиксировать высоту.",name:"fixedHeight",required:!1,type:{name:"boolean | undefined"}},rootRef:{defaultValue:null,description:"Ref корневого элемента.",name:"rootRef",required:!1,type:{name:"Ref<HTMLDivElement> | undefined"}},blockRef:{defaultValue:null,description:"Ref элемента блока поля.",name:"blockRef",required:!1,type:{name:"Ref<HTMLDivElement> | undefined"}},adornmentStart:{defaultValue:null,description:"Украшение перед основным содержимым.",name:"adornmentStart",required:!1,type:{name:"ReactNode"}},adornmentEnd:{defaultValue:null,description:"Украшение после основного содержимого.",name:"adornmentEnd",required:!1,type:{name:"ReactNode"}},mainProps:{defaultValue:null,description:"Опции основного содержимого.",name:"mainProps",required:!1,type:{name:"NoChildren<WithStyle<HTMLAttributes<HTMLDivElement>>> | undefined"}},clearable:{defaultValue:null,description:"Нужно ли выводить кнопку очистки поля.",name:"clearable",required:!1,type:{name:"boolean | undefined"}},onClear:{defaultValue:null,description:"Сработает при очистке поля.",name:"onClear",required:!1,type:{name:"MouseEventHandler<SVGSVGElement> | undefined"}},mask:{defaultValue:null,description:"Строковое представление маски.",name:"mask",required:!0,type:{name:"string"}},pattern:{defaultValue:{value:"\\d"},description:"Строковое представление регулярного выражения только доступных для ввода символов.",name:"pattern",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/masked-input/masked-input.tsx#MaskedInput"]={docgenInfo:MaskedInput.__docgenInfo,name:"MaskedInput",path:"src/masked-input/masked-input.tsx#MaskedInput"})}catch(__react_docgen_typescript_loader_error){}},"./src/phone-input/presets.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{YD:()=>IDS,hW:()=>countries,Tw:()=>countriesList});const russia_namespaceObject=__webpack_require__.p+"static/media/russia.bd02d8d3.png",kazakhstan_namespaceObject=__webpack_require__.p+"static/media/kazakhstan.b59d89f8.png",armenia_namespaceObject=__webpack_require__.p+"static/media/armenia.103f3efc.png",belarus_namespaceObject=__webpack_require__.p+"static/media/belarus.7bcc953b.png",kyrgyzstan_namespaceObject=__webpack_require__.p+"static/media/kyrgyzstan.1cb17f7d.png",azerbaijan_namespaceObject=__webpack_require__.p+"static/media/azerbaijan.988611a5.png",georgia_namespaceObject=__webpack_require__.p+"static/media/georgia.44e46fda.png",moldova_namespaceObject=__webpack_require__.p+"static/media/moldova.e9f13b93.png",tajikistan_namespaceObject=__webpack_require__.p+"static/media/tajikistan.f454fe62.png",turkmenistan_namespaceObject=__webpack_require__.p+"static/media/turkmenistan.8b63270e.png",uzbekistan_namespaceObject=__webpack_require__.p+"static/media/uzbekistan.8bba3b87.png",ukraine_namespaceObject=__webpack_require__.p+"static/media/ukraine.17bac3a5.png",other_namespaceObject=__webpack_require__.p+"static/media/other.d1c6e1ab.png",IDS={russia:"russia",kazakhstan:"kazakhstan",armenia:"armenia",belarus:"belarus",kyrgyzstan:"kyrgyzstan",azerbaijan:"azerbaijan",georgia:"georgia",moldova:"moldova",tajikistan:"tajikistan",turkmenistan:"turkmenistan",uzbekistan:"uzbekistan",ukraine:"ukraine",other:"other"},NAMES={[IDS.russia]:"Россия",[IDS.kazakhstan]:"Казахстан",[IDS.armenia]:"Армения",[IDS.belarus]:"Беларусь",[IDS.kyrgyzstan]:"Кыргызстан",[IDS.azerbaijan]:"Азербайджан",[IDS.georgia]:"Грузия",[IDS.moldova]:"Молдова",[IDS.tajikistan]:"Таджикистан",[IDS.turkmenistan]:"Туркмения",[IDS.uzbekistan]:"Узбекистан",[IDS.ukraine]:"Украина",[IDS.other]:"Другое"},MASKS={[IDS.russia]:"+7 (___) ___-__-__",[IDS.kazakhstan]:"+7 (___) ___-__-__",[IDS.armenia]:"+374-__-___-___",[IDS.belarus]:"+375 (__) ___-__-__",[IDS.kyrgyzstan]:"+996 (___) ___-___",[IDS.azerbaijan]:"+994-__-___-__-__",[IDS.georgia]:"+995 (___) ___-___",[IDS.moldova]:"+373-____-____",[IDS.tajikistan]:"+992-__-___-____",[IDS.turkmenistan]:"+993-_-___-____",[IDS.uzbekistan]:"+998-__-___-____",[IDS.ukraine]:"+380 (__) ___-__-__",[IDS.other]:"_______________"},IMAGES={[IDS.russia]:russia_namespaceObject,[IDS.kazakhstan]:kazakhstan_namespaceObject,[IDS.armenia]:armenia_namespaceObject,[IDS.belarus]:belarus_namespaceObject,[IDS.kyrgyzstan]:kyrgyzstan_namespaceObject,[IDS.azerbaijan]:azerbaijan_namespaceObject,[IDS.georgia]:georgia_namespaceObject,[IDS.moldova]:moldova_namespaceObject,[IDS.tajikistan]:tajikistan_namespaceObject,[IDS.turkmenistan]:turkmenistan_namespaceObject,[IDS.uzbekistan]:uzbekistan_namespaceObject,[IDS.ukraine]:ukraine_namespaceObject,[IDS.other]:other_namespaceObject},CODES={[IDS.russia]:"+7",[IDS.kazakhstan]:"+7",[IDS.armenia]:"+374",[IDS.belarus]:"+375",[IDS.kyrgyzstan]:"+996",[IDS.azerbaijan]:"+994",[IDS.georgia]:"+995",[IDS.moldova]:"+373",[IDS.tajikistan]:"+992",[IDS.turkmenistan]:"+993",[IDS.uzbekistan]:"+998",[IDS.ukraine]:"+380",[IDS.other]:""},countriesList=[IDS.russia,IDS.kazakhstan,IDS.armenia,IDS.belarus,IDS.kyrgyzstan,IDS.azerbaijan,IDS.georgia,IDS.moldova,IDS.tajikistan,IDS.turkmenistan,IDS.uzbekistan,IDS.ukraine,IDS.other].map((id=>({id,name:NAMES[id],code:CODES[id],codeChars:CODES[id].replace(/\D/g,""),mask:MASKS[id],imageSrc:IMAGES[id]}))),countries=countriesList.reduce(((acc,item)=>({...acc,[item.id]:item})),{})},"./src/phone-input/utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{K9:()=>PhoneValue,bk:()=>stubSyntheticEvent,yE:()=>defineCountry});var _presets__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/phone-input/presets.ts");function defineCountry(value){let result;return value&&(result=_presets__WEBPACK_IMPORTED_MODULE_0__.Tw.find((({codeChars})=>0===value.indexOf(codeChars))),result&&result.id===_presets__WEBPACK_IMPORTED_MODULE_0__.YD.russia&&["6","7"].includes(value[1])&&(result=_presets__WEBPACK_IMPORTED_MODULE_0__.hW.kazakhstan)),result||_presets__WEBPACK_IMPORTED_MODULE_0__.hW.russia}const PhoneValue={addCode:(value,country)=>`${country.codeChars}${value.replace(/\D/g,"")}`,removeCode:(value,country)=>value.replace(/\D/g,"").slice(country.codeChars.length)};function stubSyntheticEvent(element,nativeEvent){return{nativeEvent,currentTarget:element,target:element,type:nativeEvent.type,bubbles:nativeEvent.bubbles,cancelable:nativeEvent.cancelable,eventPhase:nativeEvent.eventPhase,isTrusted:nativeEvent.isTrusted,timeStamp:nativeEvent.timeStamp,defaultPrevented:!1,isDefaultPrevented:()=>!1,isPropagationStopped:()=>!1,persist:()=>{},preventDefault:()=>{},stopPropagation:()=>{}}}},"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[15].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/phone-input/phone-input.module.scss":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,".phone-input-module__opener__f03{display:flex;align-items:center;user-select:none;cursor:pointer;padding:8px;margin:-8px;border-radius:4px}.phone-input-module__opener__f03:focus-visible{outline:0;background:#e4f1f9}.phone-input-module__arrow__f92{display:block;fill:#9e9e9e;margin-left:4px;pointer-events:none}","",{version:3,sources:["webpack://./src/phone-input/phone-input.module.scss","webpack://./src/colors.scss"],names:[],mappings:"AAEA,iCACE,YAAA,CACA,kBAAA,CACA,gBAAA,CACA,cAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAA,CACA,+CACE,SAAA,CACA,kBCqBa,CDjBjB,gCACE,aAAA,CACA,YCVa,CDWb,eAAA,CACA,mBAAA",sourcesContent:["@use '../colors';\n\n.opener {\n  display: flex;\n  align-items: center;\n  user-select: none;\n  cursor: pointer;\n  padding: 8px;\n  margin: -8px;\n  border-radius: 4px;\n  &:focus-visible {\n    outline: 0;\n    background: colors.$additional-sky;\n  }\n}\n\n.arrow {\n  display: block;\n  fill: colors.$basic-gray38;\n  margin-left: 4px;\n  pointer-events: none; // игнорируем клики т.к. после них элемент стрелки подменяется и считается что он сработал вне элемента родителя\n}\n","// GENERATED FILE - DO NOT CHANGE IT MANUALLY\n\n// basic\n$basic-blue: #1f84db;\n$basic-gray87: #212121;\n$basic-gray76: #3a3a3b;\n$basic-gray66: #545455;\n$basic-gray54: #757575;\n$basic-gray38: #9e9e9e;\n$basic-gray24: #c2c2c2;\n$basic-gray12: #e0e0e0;\n$basic-gray8: #ebebeb;\n$basic-gray4: #f5f5f5;\n$basic-gray2: #fafafa;\n$basic-white: #fff;\n\n// additional\n$additional-deep-red: #d50000;\n$additional-red: #fb3a2f;\n$additional-light-red: #feebea;\n$additional-dark-teal: #089176;\n$additional-teal: #09ab8b;\n$additional-green: #00c853;\n$additional-light-green: #64dd17;\n$additional-lime: #aeea00;\n$additional-faded-green: #eff9ea;\n$additional-pink: #e82e5c;\n$additional-purple: #b52ea8;\n$additional-violet: #902bd0;\n$additional-deep-purple: #634bdf;\n$additional-electric-blue: #2962ff;\n$additional-light-blue: #0091ea;\n$additional-cyan: #00b8d4;\n$additional-sky: #e4f1f9;\n$additional-deep-orange: #ff7200;\n$additional-amber: #ffab00;\n$additional-yellow: #ffd600;\n$additional-gold: #d5a43b;\n$additional-brown: #795548;\n$additional-blue-gray: #607d8b;\n$additional-deep-blue: #00599d;\n$additional-dark-blue: #002b41;\n$additional-unlit-blue: #1b75c2;\n"],sourceRoot:""}]),___CSS_LOADER_EXPORT___.locals={opener:"phone-input-module__opener__f03",arrow:"phone-input-module__arrow__f92"};const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___}}]);