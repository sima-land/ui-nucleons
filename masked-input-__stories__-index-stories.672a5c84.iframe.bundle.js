"use strict";(self.webpackChunk_sima_land_ui_nucleons=self.webpackChunk_sima_land_ui_nucleons||[]).push([[4841],{"./src/masked-input/__stories__/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DateField:()=>DateField,NoRestPlaceholder:()=>NoRestPlaceholder,Primary:()=>Primary,TestMaskChange:()=>TestMaskChange,TestUncontrolled:()=>TestUncontrolled,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _sima_land_ui_nucleons_masked_input__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/masked-input/index.ts"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js"),_sima_land_ui_nucleons_dropdown_item__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/dropdown-item/index.tsx"),_sima_land_ui_nucleons_select__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/select/index.ts"),_sima_land_ui_nucleons_text_button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/text-button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"common/MaskedInput",component:_sima_land_ui_nucleons_masked_input__WEBPACK_IMPORTED_MODULE_0__.C,parameters:{storySource:{source:"import { MaskedInput } from '@sima-land/ui-nucleons/masked-input';\nimport { useState } from 'react';\nimport { DropdownItem } from '@sima-land/ui-nucleons/dropdown-item';\nimport { Select } from '@sima-land/ui-nucleons/select';\nimport { TextButton } from '@sima-land/ui-nucleons/text-button';\nexport default {\n  title: 'common/MaskedInput',\n  component: MaskedInput,\n  parameters: {\n    layout: 'padded'\n  }\n};\nexport function Primary() {\n  const defaultValue = '8005553535';\n  const [value, setValue] = useState(defaultValue);\n  return <>\n      <MaskedInput label='Телефон' mask='+7 (___) ___-__-__' value={value} onChange={(event, data) => setValue(data.cleanValue)} />\n\n      <p>Значение: {value || '[пусто]'}</p>\n\n      <TextButton size='s' onClick={() => setValue(defaultValue)}>\n        Сбросить\n      </TextButton>\n    </>;\n}\nPrimary.storyName = 'Простой пример';\nexport function DateField() {\n  const defaultValue = '08.05.1995';\n  const mask = '__.__.____';\n  const placeholder = 'ДД.ММ.ГГГГ';\n  const [value, setValue] = useState(defaultValue);\n  const [rawValue, setRawValue] = useState(defaultValue);\n  return <MaskedInput label='Дата рождения' mask={mask} value={value} onChange={(event, data) => {\n    setRawValue(data.value);\n    setValue(data.cleanValue);\n  }} baseInputProps={{\n    restPlaceholder: {\n      value: placeholder.slice(rawValue.length)\n    }\n  }} />;\n}\nDateField.storyName = 'Поле даты';\nexport function NoRestPlaceholder() {\n  const defaultValue = '1112223344';\n  const [value, setValue] = useState(defaultValue);\n  return <>\n      <MaskedInput label='Телефон' mask='+7 (___) ___-__-__' baseInputProps={{\n      restPlaceholder: {\n        value: ''\n      }\n    }} value={value} onChange={(event, data) => setValue(data.cleanValue)} />\n    </>;\n}\nNoRestPlaceholder.storyName = 'Без rest placeholder';\nexport function TestUncontrolled() {\n  const defaultValue = '4443332211';\n  const [value, setValue] = useState(defaultValue);\n  return <>\n      <MaskedInput label='Телефон' mask='+7 (___) ___-__-__' defaultValue={defaultValue} onChange={(event, data) => setValue(data.cleanValue)} />\n\n      <p>Значение: {value || '[пусто]'}</p>\n    </>;\n}\nTestUncontrolled.storyName = 'Тест: неконтролируемое поле';\nexport function TestMaskChange() {\n  const masks: ReadonlyArray<{\n    name: string;\n    mask: string;\n  }> = [{\n    name: 'Паспорт',\n    mask: '____ ______'\n  }, {\n    name: 'Дата',\n    mask: '__ / __ / ____'\n  }, {\n    name: 'Телефон',\n    mask: '+7 (___) ___-__-__'\n  }, {\n    name: 'Карта',\n    mask: '____ ____ ____ ____'\n  }];\n  const [value, setValue] = useState('');\n  const [mask, setMask] = useState(masks[0]);\n  return <>\n      <Select opener={<Select.TextButton size='s' />} value={mask.name} onValueChange={maskName => {\n      const newMask = masks.find(i => i.name === maskName);\n      if (newMask) {\n        setMask(newMask);\n        setValue(newMask.mask.replace(/[^_]/g, '').replace(/_/g, '0'));\n      }\n    }}>\n        {masks.map((item, index) => <DropdownItem key={index} value={item.name}>\n            {item.name}\n          </DropdownItem>)}\n      </Select>\n\n      <MaskedInput style={{\n      marginTop: '12px'\n    }} label={mask.name} mask={mask.mask} value={value} onChange={(event, data) => {\n      setValue(data.cleanValue);\n    }} />\n\n      <p>Значение: {value || '[пусто]'}</p>\n    </>;\n}\nTestMaskChange.storyName = 'Тест: смена маски';\nPrimary.parameters = {\n  ...Primary.parameters,\n  docs: {\n    ...Primary.parameters?.docs,\n    source: {\n      originalSource: \"function Primary() {\\n  const defaultValue = '8005553535';\\n  const [value, setValue] = useState(defaultValue);\\n  return <>\\n      <MaskedInput label='\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D' mask='+7 (___) ___-__-__' value={value} onChange={(event, data) => setValue(data.cleanValue)} />\\n\\n      <p>\\u0417\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435: {value || '[\\u043F\\u0443\\u0441\\u0442\\u043E]'}</p>\\n\\n      <TextButton size='s' onClick={() => setValue(defaultValue)}>\\n        \\u0421\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C\\n      </TextButton>\\n    </>;\\n}\",\n      ...Primary.parameters?.docs?.source\n    }\n  }\n};\nDateField.parameters = {\n  ...DateField.parameters,\n  docs: {\n    ...DateField.parameters?.docs,\n    source: {\n      originalSource: \"function DateField() {\\n  const defaultValue = '08.05.1995';\\n  const mask = '__.__.____';\\n  const placeholder = '\\u0414\\u0414.\\u041C\\u041C.\\u0413\\u0413\\u0413\\u0413';\\n  const [value, setValue] = useState(defaultValue);\\n  const [rawValue, setRawValue] = useState(defaultValue);\\n  return <MaskedInput label='\\u0414\\u0430\\u0442\\u0430 \\u0440\\u043E\\u0436\\u0434\\u0435\\u043D\\u0438\\u044F' mask={mask} value={value} onChange={(event, data) => {\\n    setRawValue(data.value);\\n    setValue(data.cleanValue);\\n  }} baseInputProps={{\\n    restPlaceholder: {\\n      value: placeholder.slice(rawValue.length)\\n    }\\n  }} />;\\n}\",\n      ...DateField.parameters?.docs?.source\n    }\n  }\n};\nNoRestPlaceholder.parameters = {\n  ...NoRestPlaceholder.parameters,\n  docs: {\n    ...NoRestPlaceholder.parameters?.docs,\n    source: {\n      originalSource: \"function NoRestPlaceholder() {\\n  const defaultValue = '1112223344';\\n  const [value, setValue] = useState(defaultValue);\\n  return <>\\n      <MaskedInput label='\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D' mask='+7 (___) ___-__-__' baseInputProps={{\\n      restPlaceholder: {\\n        value: ''\\n      }\\n    }} value={value} onChange={(event, data) => setValue(data.cleanValue)} />\\n    </>;\\n}\",\n      ...NoRestPlaceholder.parameters?.docs?.source\n    }\n  }\n};\nTestUncontrolled.parameters = {\n  ...TestUncontrolled.parameters,\n  docs: {\n    ...TestUncontrolled.parameters?.docs,\n    source: {\n      originalSource: \"function TestUncontrolled() {\\n  const defaultValue = '4443332211';\\n  const [value, setValue] = useState(defaultValue);\\n  return <>\\n      <MaskedInput label='\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D' mask='+7 (___) ___-__-__' defaultValue={defaultValue} onChange={(event, data) => setValue(data.cleanValue)} />\\n\\n      <p>\\u0417\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435: {value || '[\\u043F\\u0443\\u0441\\u0442\\u043E]'}</p>\\n    </>;\\n}\",\n      ...TestUncontrolled.parameters?.docs?.source\n    }\n  }\n};\nTestMaskChange.parameters = {\n  ...TestMaskChange.parameters,\n  docs: {\n    ...TestMaskChange.parameters?.docs,\n    source: {\n      originalSource: \"function TestMaskChange() {\\n  const masks: ReadonlyArray<{\\n    name: string;\\n    mask: string;\\n  }> = [{\\n    name: '\\u041F\\u0430\\u0441\\u043F\\u043E\\u0440\\u0442',\\n    mask: '____ ______'\\n  }, {\\n    name: '\\u0414\\u0430\\u0442\\u0430',\\n    mask: '__ / __ / ____'\\n  }, {\\n    name: '\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D',\\n    mask: '+7 (___) ___-__-__'\\n  }, {\\n    name: '\\u041A\\u0430\\u0440\\u0442\\u0430',\\n    mask: '____ ____ ____ ____'\\n  }];\\n  const [value, setValue] = useState('');\\n  const [mask, setMask] = useState(masks[0]);\\n  return <>\\n      <Select opener={<Select.TextButton size='s' />} value={mask.name} onValueChange={maskName => {\\n      const newMask = masks.find(i => i.name === maskName);\\n      if (newMask) {\\n        setMask(newMask);\\n        setValue(newMask.mask.replace(/[^_]/g, '').replace(/_/g, '0'));\\n      }\\n    }}>\\n        {masks.map((item, index) => <DropdownItem key={index} value={item.name}>\\n            {item.name}\\n          </DropdownItem>)}\\n      </Select>\\n\\n      <MaskedInput style={{\\n      marginTop: '12px'\\n    }} label={mask.name} mask={mask.mask} value={value} onChange={(event, data) => {\\n      setValue(data.cleanValue);\\n    }} />\\n\\n      <p>\\u0417\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435: {value || '[\\u043F\\u0443\\u0441\\u0442\\u043E]'}</p>\\n    </>;\\n}\",\n      ...TestMaskChange.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{primary:{startLoc:{col:7,line:13},endLoc:{col:1,line:25},startBody:{col:7,line:13},endBody:{col:1,line:25}},"date-field":{startLoc:{col:7,line:27},endLoc:{col:1,line:41},startBody:{col:7,line:27},endBody:{col:1,line:41}},"no-rest-placeholder":{startLoc:{col:7,line:43},endLoc:{col:1,line:53},startBody:{col:7,line:43},endBody:{col:1,line:53}},"test-uncontrolled":{startLoc:{col:7,line:55},endLoc:{col:1,line:63},startBody:{col:7,line:55},endBody:{col:1,line:63}},"test-mask-change":{startLoc:{col:7,line:65},endLoc:{col:1,line:105},startBody:{col:7,line:65},endBody:{col:1,line:105}}}},layout:"padded"}},Primary=function Primary(){const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("8005553535");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_sima_land_ui_nucleons_masked_input__WEBPACK_IMPORTED_MODULE_0__.C,{label:"Телефон",mask:"+7 (___) ___-__-__",value,onChange:(event,data)=>setValue(data.cleanValue)}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("p",{children:["Значение: ",value||"[пусто]"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_sima_land_ui_nucleons_text_button__WEBPACK_IMPORTED_MODULE_4__.A,{size:"s",onClick:()=>setValue("8005553535"),children:"Сбросить"})]})};Primary.storyName="Простой пример";const DateField=function DateField(){const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("08.05.1995"),[rawValue,setRawValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("08.05.1995");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_sima_land_ui_nucleons_masked_input__WEBPACK_IMPORTED_MODULE_0__.C,{label:"Дата рождения",mask:"__.__.____",value,onChange:(event,data)=>{setRawValue(data.value),setValue(data.cleanValue)},baseInputProps:{restPlaceholder:{value:"ДД.ММ.ГГГГ".slice(rawValue.length)}}})};DateField.displayName="DateField",DateField.storyName="Поле даты";const NoRestPlaceholder=function NoRestPlaceholder(){const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("1112223344");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_sima_land_ui_nucleons_masked_input__WEBPACK_IMPORTED_MODULE_0__.C,{label:"Телефон",mask:"+7 (___) ___-__-__",baseInputProps:{restPlaceholder:{value:""}},value,onChange:(event,data)=>setValue(data.cleanValue)})})};NoRestPlaceholder.storyName="Без rest placeholder";const TestUncontrolled=function TestUncontrolled(){const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("4443332211");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_sima_land_ui_nucleons_masked_input__WEBPACK_IMPORTED_MODULE_0__.C,{label:"Телефон",mask:"+7 (___) ___-__-__",defaultValue:"4443332211",onChange:(event,data)=>setValue(data.cleanValue)}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("p",{children:["Значение: ",value||"[пусто]"]})]})};TestUncontrolled.storyName="Тест: неконтролируемое поле";const TestMaskChange=function TestMaskChange(){const masks=[{name:"Паспорт",mask:"____ ______"},{name:"Дата",mask:"__ / __ / ____"},{name:"Телефон",mask:"+7 (___) ___-__-__"},{name:"Карта",mask:"____ ____ ____ ____"}],[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(""),[mask,setMask]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(masks[0]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_sima_land_ui_nucleons_select__WEBPACK_IMPORTED_MODULE_3__.P,{opener:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_sima_land_ui_nucleons_select__WEBPACK_IMPORTED_MODULE_3__.P.TextButton,{size:"s"}),value:mask.name,onValueChange:maskName=>{const newMask=masks.find((i=>i.name===maskName));newMask&&(setMask(newMask),setValue(newMask.mask.replace(/[^_]/g,"").replace(/_/g,"0")))},children:masks.map(((item,index)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_sima_land_ui_nucleons_dropdown_item__WEBPACK_IMPORTED_MODULE_2__.h,{value:item.name,children:item.name},index)))}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_sima_land_ui_nucleons_masked_input__WEBPACK_IMPORTED_MODULE_0__.C,{style:{marginTop:"12px"},label:mask.name,mask:mask.mask,value,onChange:(event,data)=>{setValue(data.cleanValue)}}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("p",{children:["Значение: ",value||"[пусто]"]})]})};TestMaskChange.storyName="Тест: смена маски",Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"function Primary() {\n  const defaultValue = '8005553535';\n  const [value, setValue] = useState(defaultValue);\n  return <>\n      <MaskedInput label='Телефон' mask='+7 (___) ___-__-__' value={value} onChange={(event, data) => setValue(data.cleanValue)} />\n\n      <p>Значение: {value || '[пусто]'}</p>\n\n      <TextButton size='s' onClick={() => setValue(defaultValue)}>\n        Сбросить\n      </TextButton>\n    </>;\n}",...Primary.parameters?.docs?.source}}},DateField.parameters={...DateField.parameters,docs:{...DateField.parameters?.docs,source:{originalSource:"function DateField() {\n  const defaultValue = '08.05.1995';\n  const mask = '__.__.____';\n  const placeholder = 'ДД.ММ.ГГГГ';\n  const [value, setValue] = useState(defaultValue);\n  const [rawValue, setRawValue] = useState(defaultValue);\n  return <MaskedInput label='Дата рождения' mask={mask} value={value} onChange={(event, data) => {\n    setRawValue(data.value);\n    setValue(data.cleanValue);\n  }} baseInputProps={{\n    restPlaceholder: {\n      value: placeholder.slice(rawValue.length)\n    }\n  }} />;\n}",...DateField.parameters?.docs?.source}}},NoRestPlaceholder.parameters={...NoRestPlaceholder.parameters,docs:{...NoRestPlaceholder.parameters?.docs,source:{originalSource:"function NoRestPlaceholder() {\n  const defaultValue = '1112223344';\n  const [value, setValue] = useState(defaultValue);\n  return <>\n      <MaskedInput label='Телефон' mask='+7 (___) ___-__-__' baseInputProps={{\n      restPlaceholder: {\n        value: ''\n      }\n    }} value={value} onChange={(event, data) => setValue(data.cleanValue)} />\n    </>;\n}",...NoRestPlaceholder.parameters?.docs?.source}}},TestUncontrolled.parameters={...TestUncontrolled.parameters,docs:{...TestUncontrolled.parameters?.docs,source:{originalSource:"function TestUncontrolled() {\n  const defaultValue = '4443332211';\n  const [value, setValue] = useState(defaultValue);\n  return <>\n      <MaskedInput label='Телефон' mask='+7 (___) ___-__-__' defaultValue={defaultValue} onChange={(event, data) => setValue(data.cleanValue)} />\n\n      <p>Значение: {value || '[пусто]'}</p>\n    </>;\n}",...TestUncontrolled.parameters?.docs?.source}}},TestMaskChange.parameters={...TestMaskChange.parameters,docs:{...TestMaskChange.parameters?.docs,source:{originalSource:"function TestMaskChange() {\n  const masks: ReadonlyArray<{\n    name: string;\n    mask: string;\n  }> = [{\n    name: 'Паспорт',\n    mask: '____ ______'\n  }, {\n    name: 'Дата',\n    mask: '__ / __ / ____'\n  }, {\n    name: 'Телефон',\n    mask: '+7 (___) ___-__-__'\n  }, {\n    name: 'Карта',\n    mask: '____ ____ ____ ____'\n  }];\n  const [value, setValue] = useState('');\n  const [mask, setMask] = useState(masks[0]);\n  return <>\n      <Select opener={<Select.TextButton size='s' />} value={mask.name} onValueChange={maskName => {\n      const newMask = masks.find(i => i.name === maskName);\n      if (newMask) {\n        setMask(newMask);\n        setValue(newMask.mask.replace(/[^_]/g, '').replace(/_/g, '0'));\n      }\n    }}>\n        {masks.map((item, index) => <DropdownItem key={index} value={item.name}>\n            {item.name}\n          </DropdownItem>)}\n      </Select>\n\n      <MaskedInput style={{\n      marginTop: '12px'\n    }} label={mask.name} mask={mask.mask} value={value} onChange={(event, data) => {\n      setValue(data.cleanValue);\n    }} />\n\n      <p>Значение: {value || '[пусто]'}</p>\n    </>;\n}",...TestMaskChange.parameters?.docs?.source}}};const __namedExportsOrder=["Primary","DateField","NoRestPlaceholder","TestUncontrolled","TestMaskChange"]}}]);